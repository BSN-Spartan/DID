package com.reddate.did.service.contract;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.*;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * Auto generated code.
 *
 * <p><strong>Do not modify!</strong>
 *
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the <a
 * href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class CptContract extends Contract {
  public static final String BINARY =
      "";

  public static final String FUNC_GETALLCPTLIST = "getAllCptList";

  public static final String FUNC_GETCPTBYCPTID = "getCptByCptId";

  public static final String FUNC_GETCPTLISTBYDID = "getCptListByDid";

  public static final String FUNC_GETINITIALIZEDATA = "getInitializeData";

  public static final String FUNC_GETREVOKEDCRED = "getRevokedCred";

  public static final String FUNC_GETREVOKEDCREDLIST = "getRevokedCredList";

  public static final String FUNC_INITIALIZE = "initialize";

  public static final String FUNC_ISCPTEXIST = "isCptExist";

  public static final String FUNC_ISCPTLISTEXIST = "isCptListExist";

  public static final String FUNC_ISCREIDINFOEXIST = "isCreIdInfoExist";

  public static final String FUNC_ISCRELISTEXIST = "isCreListExist";

  public static final String FUNC_OWNER = "owner";

  public static final String FUNC_REGISTERCPT = "registerCpt";

  public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

  public static final String FUNC_REVOKECREDENTIAL = "revokeCredential";

  public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

  public static final String FUNC_UPDATECPT = "updateCpt";

  public static final Event OWNERSHIPTRANSFERRED_EVENT =
      new Event(
          "OwnershipTransferred",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
  ;

  public static final Event GETINITIALIZEDATALOG_EVENT =
      new Event(
          "getInitializeDataLog",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Utf8String>() {}, new TypeReference<DynamicBytes>() {}));
  ;

  public static final Event REGISTERCPTRETLOG_EVENT =
      new Event(
          "registerCptRetLog",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
  ;

  public static final Event REVOKECREDENTIALRETLOG_EVENT =
      new Event(
          "revokeCredentialRetLog",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
  ;

  public static final Event UPDATECPTRETLOG_EVENT =
      new Event(
          "updateCptRetLog",
          Arrays.<TypeReference<?>>asList(
              new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
  ;

  @Deprecated
  protected CptContract(
      String contractAddress,
      Web3j web3j,
      Credentials credentials,
      BigInteger gasPrice,
      BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
  }

  protected CptContract(
      String contractAddress,
      Web3j web3j,
      Credentials credentials,
      ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
  }

  @Deprecated
  protected CptContract(
      String contractAddress,
      Web3j web3j,
      TransactionManager transactionManager,
      BigInteger gasPrice,
      BigInteger gasLimit) {
    super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }

  protected CptContract(
      String contractAddress,
      Web3j web3j,
      TransactionManager transactionManager,
      ContractGasProvider contractGasProvider) {
    super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
  }

  public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
      TransactionReceipt transactionReceipt) {
    List<EventValuesWithLog> valueList =
        extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
    ArrayList<OwnershipTransferredEventResponse> responses =
        new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
    for (EventValuesWithLog eventValues : valueList) {
      OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.previousOwner = (String) eventValues.getIndexedValues().get(0).getValue();
      typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
      EthFilter filter) {
    return web3j
        .ethLogFlowable(filter)
        .map(
            new Function<Log, OwnershipTransferredEventResponse>() {
              @Override
              public OwnershipTransferredEventResponse apply(Log log) {
                EventValuesWithLog eventValues =
                    extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse =
                    new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner =
                    (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.newOwner = (String) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
              }
            });
  }

  public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
      DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
    return ownershipTransferredEventFlowable(filter);
  }

  public List<GetInitializeDataLogEventResponse> getGetInitializeDataLogEvents(
      TransactionReceipt transactionReceipt) {
    List<EventValuesWithLog> valueList =
        extractEventParametersWithLog(GETINITIALIZEDATALOG_EVENT, transactionReceipt);
    ArrayList<GetInitializeDataLogEventResponse> responses =
        new ArrayList<GetInitializeDataLogEventResponse>(valueList.size());
    for (EventValuesWithLog eventValues : valueList) {
      GetInitializeDataLogEventResponse typedResponse = new GetInitializeDataLogEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.msgcode = (String) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.msg = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<GetInitializeDataLogEventResponse> getInitializeDataLogEventFlowable(
      EthFilter filter) {
    return web3j
        .ethLogFlowable(filter)
        .map(
            new Function<Log, GetInitializeDataLogEventResponse>() {
              @Override
              public GetInitializeDataLogEventResponse apply(Log log) {
                EventValuesWithLog eventValues =
                    extractEventParametersWithLog(GETINITIALIZEDATALOG_EVENT, log);
                GetInitializeDataLogEventResponse typedResponse =
                    new GetInitializeDataLogEventResponse();
                typedResponse.log = log;
                typedResponse.msgcode =
                    (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.msg = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
              }
            });
  }

  public Flowable<GetInitializeDataLogEventResponse> getInitializeDataLogEventFlowable(
      DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(GETINITIALIZEDATALOG_EVENT));
    return getInitializeDataLogEventFlowable(filter);
  }

  public List<RegisterCptRetLogEventResponse> getRegisterCptRetLogEvents(
      TransactionReceipt transactionReceipt) {
    List<EventValuesWithLog> valueList =
        extractEventParametersWithLog(REGISTERCPTRETLOG_EVENT, transactionReceipt);
    ArrayList<RegisterCptRetLogEventResponse> responses =
        new ArrayList<RegisterCptRetLogEventResponse>(valueList.size());
    for (EventValuesWithLog eventValues : valueList) {
      RegisterCptRetLogEventResponse typedResponse = new RegisterCptRetLogEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.msgcode = (String) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.msg = (String) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<RegisterCptRetLogEventResponse> registerCptRetLogEventFlowable(EthFilter filter) {
    return web3j
        .ethLogFlowable(filter)
        .map(
            new Function<Log, RegisterCptRetLogEventResponse>() {
              @Override
              public RegisterCptRetLogEventResponse apply(Log log) {
                EventValuesWithLog eventValues =
                    extractEventParametersWithLog(REGISTERCPTRETLOG_EVENT, log);
                RegisterCptRetLogEventResponse typedResponse = new RegisterCptRetLogEventResponse();
                typedResponse.log = log;
                typedResponse.msgcode =
                    (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.msg = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
              }
            });
  }

  public Flowable<RegisterCptRetLogEventResponse> registerCptRetLogEventFlowable(
      DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(REGISTERCPTRETLOG_EVENT));
    return registerCptRetLogEventFlowable(filter);
  }

  public List<RevokeCredentialRetLogEventResponse> getRevokeCredentialRetLogEvents(
      TransactionReceipt transactionReceipt) {
    List<EventValuesWithLog> valueList =
        extractEventParametersWithLog(REVOKECREDENTIALRETLOG_EVENT, transactionReceipt);
    ArrayList<RevokeCredentialRetLogEventResponse> responses =
        new ArrayList<RevokeCredentialRetLogEventResponse>(valueList.size());
    for (EventValuesWithLog eventValues : valueList) {
      RevokeCredentialRetLogEventResponse typedResponse = new RevokeCredentialRetLogEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.msgcode = (String) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.msg = (String) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<RevokeCredentialRetLogEventResponse> revokeCredentialRetLogEventFlowable(
      EthFilter filter) {
    return web3j
        .ethLogFlowable(filter)
        .map(
            new Function<Log, RevokeCredentialRetLogEventResponse>() {
              @Override
              public RevokeCredentialRetLogEventResponse apply(Log log) {
                EventValuesWithLog eventValues =
                    extractEventParametersWithLog(REVOKECREDENTIALRETLOG_EVENT, log);
                RevokeCredentialRetLogEventResponse typedResponse =
                    new RevokeCredentialRetLogEventResponse();
                typedResponse.log = log;
                typedResponse.msgcode =
                    (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.msg = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
              }
            });
  }

  public Flowable<RevokeCredentialRetLogEventResponse> revokeCredentialRetLogEventFlowable(
      DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(REVOKECREDENTIALRETLOG_EVENT));
    return revokeCredentialRetLogEventFlowable(filter);
  }

  public List<UpdateCptRetLogEventResponse> getUpdateCptRetLogEvents(
      TransactionReceipt transactionReceipt) {
    List<EventValuesWithLog> valueList =
        extractEventParametersWithLog(UPDATECPTRETLOG_EVENT, transactionReceipt);
    ArrayList<UpdateCptRetLogEventResponse> responses =
        new ArrayList<UpdateCptRetLogEventResponse>(valueList.size());
    for (EventValuesWithLog eventValues : valueList) {
      UpdateCptRetLogEventResponse typedResponse = new UpdateCptRetLogEventResponse();
      typedResponse.log = eventValues.getLog();
      typedResponse.msgcode = (String) eventValues.getNonIndexedValues().get(0).getValue();
      typedResponse.msg = (String) eventValues.getNonIndexedValues().get(1).getValue();
      responses.add(typedResponse);
    }
    return responses;
  }

  public Flowable<UpdateCptRetLogEventResponse> updateCptRetLogEventFlowable(EthFilter filter) {
    return web3j
        .ethLogFlowable(filter)
        .map(
            new Function<Log, UpdateCptRetLogEventResponse>() {
              @Override
              public UpdateCptRetLogEventResponse apply(Log log) {
                EventValuesWithLog eventValues =
                    extractEventParametersWithLog(UPDATECPTRETLOG_EVENT, log);
                UpdateCptRetLogEventResponse typedResponse = new UpdateCptRetLogEventResponse();
                typedResponse.log = log;
                typedResponse.msgcode =
                    (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.msg = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
              }
            });
  }

  public Flowable<UpdateCptRetLogEventResponse> updateCptRetLogEventFlowable(
      DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
    EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
    filter.addSingleTopic(EventEncoder.encode(UPDATECPTRETLOG_EVENT));
    return updateCptRetLogEventFlowable(filter);
  }

  public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, List<String>>> getAllCptList(
      BigInteger page, BigInteger size) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_GETALLCPTLIST,
            Arrays.<Type>asList(
                new org.web3j.abi.datatypes.generated.Uint32(page),
                new org.web3j.abi.datatypes.generated.Uint32(size)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<DynamicArray<Utf8String>>() {}));
    return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, List<String>>>(
        function,
        new Callable<Tuple4<String, BigInteger, BigInteger, List<String>>>() {
          @Override
          public Tuple4<String, BigInteger, BigInteger, List<String>> call() throws Exception {
            List<Type> results = executeCallMultipleValueReturn(function);
            return new Tuple4<String, BigInteger, BigInteger, List<String>>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                convertToNative((List<Utf8String>) results.get(3).getValue()));
          }
        });
  }

  public RemoteFunctionCall<Tuple3<String, String, String>> getCptByCptId(String cptId) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_GETCPTBYCPTID,
            Arrays.<Type>asList(new Utf8String(cptId)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Utf8String>() {}));
    return new RemoteFunctionCall<Tuple3<String, String, String>>(
        function,
        new Callable<Tuple3<String, String, String>>() {
          @Override
          public Tuple3<String, String, String> call() throws Exception {
            List<Type> results = executeCallMultipleValueReturn(function);
            return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
          }
        });
  }

  public RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, List<String>>> getCptListByDid(
      String did, BigInteger page, BigInteger size) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_GETCPTLISTBYDID,
            Arrays.<Type>asList(
                new Utf8String(did),
                new org.web3j.abi.datatypes.generated.Uint32(page),
                new org.web3j.abi.datatypes.generated.Uint32(size)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<DynamicArray<Utf8String>>() {}));
    return new RemoteFunctionCall<Tuple4<String, BigInteger, BigInteger, List<String>>>(
        function,
        new Callable<Tuple4<String, BigInteger, BigInteger, List<String>>>() {
          @Override
          public Tuple4<String, BigInteger, BigInteger, List<String>> call() throws Exception {
            List<Type> results = executeCallMultipleValueReturn(function);
            return new Tuple4<String, BigInteger, BigInteger, List<String>>(
                (String) results.get(0).getValue(),
                (BigInteger) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                convertToNative((List<Utf8String>) results.get(3).getValue()));
          }
        });
  }

  public RemoteFunctionCall<TransactionReceipt> getInitializeData() {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_GETINITIALIZEDATA,
            Arrays.<Type>asList(),
            Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<Tuple3<String, String, String>> getRevokedCred(
      String did, String credId) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_GETREVOKEDCRED,
            Arrays.<Type>asList(
                new Utf8String(did),
                new Utf8String(credId)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Utf8String>() {}));
    return new RemoteFunctionCall<Tuple3<String, String, String>>(
        function,
        new Callable<Tuple3<String, String, String>>() {
          @Override
          public Tuple3<String, String, String> call() throws Exception {
            List<Type> results = executeCallMultipleValueReturn(function);
            return new Tuple3<String, String, String>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (String) results.get(2).getValue());
          }
        });
  }

  public RemoteFunctionCall<Tuple5<String, String, BigInteger, BigInteger, List<String>>>
      getRevokedCredList(String did, BigInteger page, BigInteger size) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_GETREVOKEDCREDLIST,
            Arrays.<Type>asList(
                new Utf8String(did),
                new org.web3j.abi.datatypes.generated.Uint32(page),
                new org.web3j.abi.datatypes.generated.Uint32(size)),
            Arrays.<TypeReference<?>>asList(
                new TypeReference<Utf8String>() {},
                new TypeReference<Utf8String>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<Uint256>() {},
                new TypeReference<DynamicArray<Utf8String>>() {}));
    return new RemoteFunctionCall<Tuple5<String, String, BigInteger, BigInteger, List<String>>>(
        function,
        new Callable<Tuple5<String, String, BigInteger, BigInteger, List<String>>>() {
          @Override
          public Tuple5<String, String, BigInteger, BigInteger, List<String>> call()
              throws Exception {
            List<Type> results = executeCallMultipleValueReturn(function);
            return new Tuple5<String, String, BigInteger, BigInteger, List<String>>(
                (String) results.get(0).getValue(),
                (String) results.get(1).getValue(),
                (BigInteger) results.get(2).getValue(),
                (BigInteger) results.get(3).getValue(),
                convertToNative((List<Utf8String>) results.get(4).getValue()));
          }
        });
  }

  public RemoteFunctionCall<TransactionReceipt> initialize() {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_INITIALIZE, Arrays.<Type>asList(), Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<Boolean> isCptExist(String cptId) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_ISCPTEXIST,
            Arrays.<Type>asList(new Utf8String(cptId)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<Boolean> isCptListExist(String did) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_ISCPTLISTEXIST,
            Arrays.<Type>asList(new Utf8String(did)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<Boolean> isCreIdInfoExist(String id) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_ISCREIDINFOEXIST,
            Arrays.<Type>asList(new Utf8String(id)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<Boolean> isCreListExist(String id) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_ISCRELISTEXIST,
            Arrays.<Type>asList(new Utf8String(id)),
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    return executeRemoteCallSingleValueReturn(function, Boolean.class);
  }

  public RemoteFunctionCall<String> owner() {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_OWNER,
            Arrays.<Type>asList(),
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    return executeRemoteCallSingleValueReturn(function, String.class);
  }

  public RemoteFunctionCall<TransactionReceipt> registerCpt(String did, String cptId, String cpt) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_REGISTERCPT,
            Arrays.<Type>asList(
                new Utf8String(did),
                new Utf8String(cptId),
                new Utf8String(cpt)),
            Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_RENOUNCEOWNERSHIP,
            Arrays.<Type>asList(),
            Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> revokeCredential(
      String did, String credId, String info) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_REVOKECREDENTIAL,
            Arrays.<Type>asList(
                new Utf8String(did),
                new Utf8String(credId),
                new Utf8String(info)),
            Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> transferOwnership(String newOwner) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_TRANSFEROWNERSHIP,
            Arrays.<Type>asList(new Address(160, newOwner)),
            Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  public RemoteFunctionCall<TransactionReceipt> updateCpt(String did, String cptId, String cpt) {
    final org.web3j.abi.datatypes.Function function =
        new org.web3j.abi.datatypes.Function(
            FUNC_UPDATECPT,
            Arrays.<Type>asList(
                new Utf8String(did),
                new Utf8String(cptId),
                new Utf8String(cpt)),
            Collections.<TypeReference<?>>emptyList());
    return executeRemoteCallTransaction(function);
  }

  @Deprecated
  public static CptContract load(
      String contractAddress,
      Web3j web3j,
      Credentials credentials,
      BigInteger gasPrice,
      BigInteger gasLimit) {
    return new CptContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
  }

  @Deprecated
  public static CptContract load(
      String contractAddress,
      Web3j web3j,
      TransactionManager transactionManager,
      BigInteger gasPrice,
      BigInteger gasLimit) {
    return new CptContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
  }

  public static CptContract load(
      String contractAddress,
      Web3j web3j,
      Credentials credentials,
      ContractGasProvider contractGasProvider) {
    return new CptContract(contractAddress, web3j, credentials, contractGasProvider);
  }

  public static CptContract load(
      String contractAddress,
      Web3j web3j,
      TransactionManager transactionManager,
      ContractGasProvider contractGasProvider) {
    return new CptContract(contractAddress, web3j, transactionManager, contractGasProvider);
  }

  public static RemoteCall<CptContract> deploy(
      Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
    return deployRemoteCall(CptContract.class, web3j, credentials, contractGasProvider, BINARY, "");
  }

  @Deprecated
  public static RemoteCall<CptContract> deploy(
      Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
    return deployRemoteCall(CptContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
  }

  public static RemoteCall<CptContract> deploy(
      Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
    return deployRemoteCall(
        CptContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
  }

  @Deprecated
  public static RemoteCall<CptContract> deploy(
      Web3j web3j,
      TransactionManager transactionManager,
      BigInteger gasPrice,
      BigInteger gasLimit) {
    return deployRemoteCall(
        CptContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
  }

  public static class OwnershipTransferredEventResponse extends BaseEventResponse {
    public String previousOwner;

    public String newOwner;
  }

  public static class GetInitializeDataLogEventResponse extends BaseEventResponse {
    public String msgcode;

    public byte[] msg;
  }

  public static class RegisterCptRetLogEventResponse extends BaseEventResponse {
    public String msgcode;

    public String msg;
  }

  public static class RevokeCredentialRetLogEventResponse extends BaseEventResponse {
    public String msgcode;

    public String msg;
  }

  public static class UpdateCptRetLogEventResponse extends BaseEventResponse {
    public String msgcode;

    public String msg;
  }
}
